
Last Update: 5-16-12



/////////////////////////// Running the code //////////////////////////

Note: Several of the functions do not work properly on Windows, for the
      the rest, results are not guaranteed to work as intended
      Tested on: Ubuntu 12.04 LTS

Creating a clinic directory:

1) import file_manager.py. 
2) instantiate the class.
3) setup the directory structure with 
     create_clinic_dir ('clinic_name', '.')
   Use '.' to create the clinic directory in the current directory.
4) now you can call any of the other FileManager functions


-see test programs for example usage



/////////////////////////// Files /////////////////////////////////////

-README

-file_manager.py - the FileManager class

-test1.py, test2.py, test3.py, test4.py, test5.py - test programs

-tmp.pkl, tmp.img, tmp2.img, tmp.csv, tmp.xml, tmp.docx 
    These are used by the test programs

-patient.py - a placeholder patient class used by the test programs



/////////////////////  Notes on the Design ////////////////////////////

-create_clinic_dir sets up the following directory struture:
    /<root_directory>/<clinic_name>/clinic_config.pkl
                                   /patients/
                                             images/
                                             CSV/
                                             pickles/
                                             xmls/
                                             fingerprints/

-files are saved with the following filename format:

  <familyName>_<givenName>_<UUID>_<time_stamp>_<counter>.<fileExtension>

    -counter is a number (0 to some large number) used to prevent 
     filename conflicts
    -if the file is the profile image, the counter field is 'p'

    

///////////////////////////// API /////////////////////////////////////

Class FileManager -
Creates and manages the directory where patient files are stored
and retrieved. Each FileManager object corresponds to a single 
directory. 



get_clinic_dir (self) -

Returns the the full path of the current clinic's directory.
Returns False if create_clinic_dir () has not yet been called.



get_clinic_name (self) -

Returns the the current clinic's name.
Returns False if create_clinic_dir () has not yet been called.



create_clinic_dir (self, clinic_name, root_dir) -

    Creates the directory structure for a clinic instance
    with the clinic directory and the patient data directories
    below it. This will be invoked one time on every workstation 
    that makes up a clinic. A clinic directory must be set up with
    this function before any of the other public method attributes
    can be called.
Arguments:
    clinic_name - A string containing the name of the clinic.
    root_dir - A string containing the name of the directory in 
        which the new clinic directory will be saved.
Returns: 
    - True for success, False for failure



set_images_symlink (self, static_images_dir, symlink_name) -
   
Note: This function doesn't work on Windows.
    Creates a symbolic link to the images directory. This can
    be used to create a symbolic link in the '/static/images' 
    directory to all the patient images.
Argument:
    static_images_dir - the path of the directory where the new
        symlink will be created. This will probably be the path
        of the /static/images directory.
    symlink_name - the filename of the new symlink to this 
        clinic's images directory.
Returns:
    - True for success
    - False if create_clinic_dir () has not yet been called
    - False if static_images_dir is not a directory
    - False if a file called symlink_name already exists in the
      static_images_dir directory



save_patient_files (self, patient_object, *files, **special_files) -

    Save a patient file(s) to the directory with the appropriate 
    name (could be pkl, img, xml, csv, or fingerprint file). Files
    with extentions other than .pkl, .img, .xml, .csv, or 
    .fingerprint will not be saved. If save_patient_files is 
    called for files which are already in the clinic directory, a 
    duplicate will be saved under a different name.
Arguments:
    patient_object - a patient object containing the fields 
        "UUID", "family_name", "given_name", and "date". "UUID", 
        "family_name", and "given_name" are strings. "date" is of
        class datetime.datetime.
    files - 1 or more strings containing the names of files to be
        saved
    special_files - If a keyword argument 
        'profile_image=file_name' (where file_name is a string 
        containg a specified filename) is given, file_name will be
        saved as the profile image. If a profile image is already 
        saved, it will be overwritten. Note that this filename
        doesn't need to also be specified in the "*files" 
        argument.
Returns: 
    - An array containing the paths of the files that were 
      successfully saved. If an error occured that prevented a
      particular file from being saved, it will not be included 
      in this list.
    - False if create_clinic_dir () has not yet been called
    - False if an patient_object doesn't have  the correct 
      attributes, or if the attributes required by this function 
      aren't initialized



get_patient_files (self, UUID) -

    Retrieves all patient files that are connected to the 
    specified UUID. 
Argument:
    UUID - a string containing a UUID
Returns:
    - An array containing all files for the patient with the 
      specified UUID
    - False if create_clinic_dir () has not yet been called



get_patient_files2 (self, **file_info) -

    Retrieves all files of a certain type or from a certain visit.
Arguments:
    file_info - Accepts a list of keyword arguments. If the 
        keyword argument "day=a_day" is given, this function
        will search for all files corresponding to visits during
        the given day. 
            e.g. day='05'
        If the keyword argument "file_type=file_type" is
        given, where file_type is one of '.pkl', '.xml', 
        '.csv', '.fingerprint', or '.img', this function will
        search for all files with the given file extension.
        If multiple keyword arguments are given, this function
        will return the files which satisfy all of the
        specifications.
        Note: The values of the keyword arguments must be strings
Returns:
    - A list of files which satisfy the specifications given
       in file_info
    - False if create_clinic_dir () has not yet been called



transfer_clinic_files (self, target_directory, interactive=True) -

Note: doesn't work on Windows
    Copies all files from this clinic's directory to the target 
    directory. This clinic's subdirectories are copied 
    recursively. This would be invoked if the exit station needed
    to be moved from one workstation to another. 
Arguments:
    target_directory - a string containing the name of the 
        directory to which all files should be transferred
    interactive - if this is set to True, the user is asked 
        whether or not files in the target directory that have the
        same name as files in the source directory should be 
        overwritten. This is set to True by default.
Returns:
    - False if create_clinic_dir () has not yet been called or if
      the target directory does not exist.
    - True for success

































